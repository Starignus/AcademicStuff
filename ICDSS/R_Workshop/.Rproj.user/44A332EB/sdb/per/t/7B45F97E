{
    "contents" : "# Step 0 - Set up working environment and load packages ------------------------\n# helper function to get packages\n# credit Drew Conway, \"Machine Learning for Hackers\" (O'Reilly 2012)\n# https://github.com/johnmyleswhite/ML_for_Hackers/blob/master/package_installer.R\n# set list of packages\npckgs <- c(\"readr\", \"dplyr\", \"magrittr\", \"readxl\", \"tidyr\", \"lubridate\",\n           \"stringr\", \"leaflet\", \"networkD3\", \"ggplot2\")\n\n# install packages if they're not installed\nfor(p in pckgs) {\n  if(!suppressWarnings(require(p, character.only = TRUE, quietly = TRUE))) {\n    cat(paste(p, \"missing, will attempt to install\\n\"))\n    install.packages(p, dependencies = TRUE, type = \"source\")\n  }\n  else {\n    cat(paste(p, \"installed OK\\n\"))\n  }\n}\nprint(\"### All required packages installed ###\")\n\n# load necessary packages\nlibrary(readr)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(readxl)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(stringr)\n\n# SET THE FILE PATH TO WHERE YOU HAVE SAVED THE DATA, E.G.\n# C:/USERS/JIM/DESKTOP/oyster_all_raw_20160125.csv\noyster_data_path <- \"PATH/TO/DATA/LOCATION/OF/oyster_all_raw_20160125.csv\"\n\n# finding and setting your working directory --------------------------\ngetwd()\nsetwd(\"/path/to/directory\")\n\n# Step 1 - read in the data ----------------------------------------------------\noyster <- read_csv(oyster_data_path)\n# Remove capitalisation on column names\ncolnames(oyster) <- tolower(colnames(oyster))\n\n# Step 2 - selection examples --------------------------------------------------\n# Select columns with names\noyster %>% select(date, journey.action, charge)\n\n# Select columns with positions (e.g. column 1, 2, and 3; 5 and 7)\noyster %>% select(1:3, 5, 7)\n\n# \"Negative selection\" with names\noyster %>% select(-journey.action, -charge)\n\n# \"Negative selection\" with numbers\noyster %>% select(-c(4, 6, 7))\n\n# Step 3 - filtering examples --------------------------------------------------\n# Numeric conditions\noyster %>% filter(charge != 0)\n\n# Text conditions\noyster %>% filter(note != \"\")\n\n# Multiple conditions, with assignment\nwhoops <- oyster %>% filter(balance < 0) # filtering with assignment\nnoteworthy <- oyster %>% filter(note != \"\" & charge >= 2) # multiple conditions\n\n# Step 4 - grouping and summarising --------------------------------------------\n# Compute a single summary\noyster %>% summarise(avg_charge = mean(charge, na.rm = TRUE)) # average charge\n\n# Compute multiple summaries\noyster %>% summarise(avg_charge = mean(charge, na.rm = TRUE), # average charge\n                     sd_charge = sd(charge, na.rm = TRUE)) # charge std. deviation\n\n# Aggregate and summarise\noyster %>% \n  group_by(journey.action) %>% \n  summarise(avg_cost = mean(charge, na.rm = TRUE))\n\n# Summarisation chain to answer question 1\noyster_summary <- oyster %>% \n  group_by(journey.action) %>% \n  summarise(journeys = n()) %>%\n  ungroup() %>%                ## If I skip this I get the same result \n  arrange(-journeys) %>% \n  head(5)\n\n# Step 5 - Removing duff data --------------------------------------------------\n# A quick example of slice - selecting rows based on numbers\noyster %>% slice(1:10)\n\n# Set up the pattern to search for\nbadRecords <- \"Topped-up|Season ticket|Unspecified location\"\n\n# Search for those patterns\nrecords <- grep(badRecords, oyster$journey.action) \n\n# Check what grep does:\nrecords\n\n# Use slice to cut out the bad records (note that this \"updates\" the oyster object)\noyster <- oyster %>% slice(-records)\n\n# Step 6 - Adding fields -------------------------------------------------------\n# Set up a new field with a constant value\noyster %>%  mutate(newField = 4)\n\n# Set up new field(s) from existing fields\noyster %>% mutate(cost_plus_bal = charge + balance, # add charge to balance\n                  cost_plus_bal_clean = sum(charge, balance, na.rm = TRUE)) # clean up\n\n# Set up new fields with conditional logic\noyster %>% mutate(no_cost = ifelse(charge == 0 | is.na(charge), 1, 0))\n\n# Add variables to update the data\noyster <- oyster %>% \n  mutate(start.time.clean = paste0(start.time, \":00\"), # Create a start time field\n         end.time.clean = paste0(end.time, \":00\")) # Create a end time field\n\n# Split up existing fields in to new ones\noyster <- oyster %>% \n  separate(col = journey.action, \n           into = c(\"from\", \"to\"), \n           sep = \" to \", \n           remove = FALSE)\n\n# Step 7 - working with dates --------------------------------------------------\n# Turn text that looks like a date in to an actual date\noyster <- oyster %>% mutate(date.clean = dmy(date))\n\n# Add some text date-times\noyster <- oyster %>% \n  mutate(start.datetime = paste(date, start.time.clean, sep = \" \"),\n         end.datetime = paste(date, end.time.clean, sep = \" \"))\n\n# And then turn them in to actual datetimes (note mutate also updates fields)\noyster <- oyster %>% \n  mutate(start.datetime = dmy_hms(start.datetime),\n         end.datetime = dmy_hms(end.datetime))\n\n# Step 8 - Date manipulation --------------- -----------------------------------\n# Find all the times a journey started after (before*) midnight\nafterMidnightSrt <- grep(\"00|01|02\", substring(oyster$start.time,1,2))\n\n# Find all the times a journey ended after midnight\nafterMidnightEnd <- grep(\"00|01|02\", substring(oyster$end.time,1,2))\n\n# Find the records starting before midnight but ending after\nafterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)]\n\n# Use lubridate to add a day:\noyster[afterMidnight, \"end.datetime\"] <- oyster[afterMidnight, \"end.datetime\"] + days(1)\n\n# Final transformations - add a journey time and a day of the week for each journey\noyster <- oyster %>% \n  mutate(journey.time = difftime(end.datetime, \n                                 start.datetime, units = \"mins\"),\n         journey.weekday = wday(date.clean, \n                                label = TRUE, \n                                abbr = FALSE))\n\n# Step 9 - answering more detailed questions -----------------------------------\n# Longest journey\noyster %>% \n  filter(journey.time == max(oyster$journey.time, na.rm = TRUE)) %>% \n  select(journey.action, journey.time, date)\n\n\n# Average journey time by day\noyster %>% \n  group_by(journey.weekday) %>% \n  summarise(avg_time = floor(mean(journey.time, na.rm = TRUE)))\n\n# Average journeys per day\noyster %>% \n  group_by(date.clean, journey.weekday) %>% \n  summarise(journeys = n()) %>% \n  group_by(journey.weekday) %>% \n  summarise(avg_journeys = mean(journeys))\n\n",
    "created" : 1455560637344.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2075489879",
    "id" : "7B45F97E",
    "lastKnownWriteTime" : 1455608552,
    "path" : "~/Documents/Programing/R_Practise/Script_2.R",
    "project_path" : "Script_2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "# Step 0 - Set up working environment and load packages ------------------------\n# helper function to get packages\n# credit Drew Conway, \"Machine Learning for Hackers\" (O'Reilly 2012)\n# https://github.com/johnmyleswhite/ML_for_Hackers/blob/master/package_installer.R\n# set list of packages\npckgs <- c(\"readr\", \"dplyr\", \"magrittr\", \"readxl\", \"tidyr\", \"lubridate\",\n           \"stringr\", \"leaflet\", \"networkD3\", \"ggplot2\")\n\n# install packages if they're not installed\nfor(p in pckgs) {\n  if(!suppressWarnings(require(p, character.only = TRUE, quietly = TRUE))) {\n    cat(paste(p, \"missing, will attempt to install\\n\"))\n    install.packages(p, dependencies = TRUE, type = \"source\")\n  }\n  else {\n    cat(paste(p, \"installed OK\\n\"))\n  }\n}\nprint(\"### All required packages installed ###\")\n\n# load necessary packages\nlibrary(readr)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(readxl)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(leaflet)\nlibrary(networkD3)\n\n\n# SET THE FILE PATH TO WHERE YOU HAVE SAVED THE DATA, E.G.\n# C:/USERS/JIM/DESKTOP/oyster_all_raw_20160125.csv\noyster_data_path <- \"./oyster_all_raw_20160125.csv\"\nstations_data_path <- \"./stations.csv\"\n\n# Step 1 - read in the oyster data and prepare it (session 2 repeat) -----------\noyster <- read_csv(oyster_data_path)\ncolnames(oyster) <- tolower(colnames(oyster))\n\nbadRecords <- \"Topped-up|Season ticket|Unspecified location\"\nrecords <- grep(badRecords, oyster$journey.action) \noyster <- oyster %>% slice(-records)\n\noyster <- oyster %>% \n  mutate(start.time.clean = paste0(start.time, \":00\"),\n         end.time.clean = paste0(end.time, \":00\"))\n\noyster <- oyster %>% \n  separate(col = journey.action, \n           into = c(\"from\", \"to\"), \n           sep = \" to \", \n           remove = FALSE)\n\noyster <- oyster %>% mutate(date.clean = dmy(date))\n\noyster <- oyster %>% \n  mutate(start.datetime = dmy_hms(paste(date, start.time.clean, sep = \" \")),\n         end.datetime = dmy_hms(paste(date, end.time.clean, sep = \" \")))\n\nafterMidnightSrt <- grep(\"00|01|02\", substring(oyster$start.time,1,2))\nafterMidnightEnd <- grep(\"00|01|02\", substring(oyster$end.time,1,2))\nafterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)] \noyster[afterMidnight, \"end.datetime\"] <- oyster[afterMidnight, \"end.datetime\"] + days(1)\n\noyster <- oyster %>% mutate(journey.time = difftime(end.datetime, \n                                                    start.datetime, \n                                                    units = \"mins\"),\n                            journey.weekday = wday(date.clean, \n                                                   label = TRUE, \n                                                   abbr = FALSE))\n\n# Step 2 - read in the stations data -------------------------------------------\nstations <- read_csv(stations_data_path)\ncolnames(stations) <- tolower(colnames(stations))\n\n# Step 3 - clean up the join keys ----------------------------------------------\n# Set up pattern to search for\nregex <- \"\\\\[.*\\\\]|\\\\(.*\\\\)| [Dd][Ll][Rr]\"\n\n# Search for it and remove it in a new clean field\noyster <- oyster %>% \n  mutate(from.clean = str_trim(gsub(regex, \"\", from)),\n         to.clean = str_trim(gsub(regex, \"\", to)))\n\n# Step 4 - performing a left join ----------------------------------------------\n# Join on the \"from\" station location and rename the field\noyster <- oyster %>% \n  left_join(stations, by = c(\"from.clean\" = \"station\")) %>% \n  rename(from.long = long,\n         from.lat = lat)\n\n# Join on the \"to\" station and rename the field\noyster <- oyster %>% \n  left_join(stations, by = c(\"to.clean\" = \"station\")) %>% \n  rename(to.long = long,\n         to.lat = lat)\n\n# Quick query to answer last question\noyster %>% \n  group_by(from, from.long, from.lat) %>% \n  summarise(visits = n()) %>% \n  ungroup() %>% # ungroup removes the grouping and lets us sort the data\n  arrange(-visits)\n\n# Step 5 - visualisation with ggplot2 ------------------------------------------\n# Simple histogram\nqplot(x = as.numeric(journey.time), data = oyster)\n\n# Add labels \nqplot(x = as.numeric(journey.time), data = oyster, \n      main = \"Histogram of journey times\", \n      xlab = \"Journey time (mins)\", ylab = \"Count\")\n\n# Add colour\nqplot(x = as.numeric(journey.time), data = oyster, main = \"Histogram of journey times\", \n      xlab = \"Journey time (mins)\", ylab = \"Count\", fill = I(\"steelblue\"), \n      colour = I(\"white\"), binwidth =3)\n\n# ----------\n\n# Filter out free journeys\noyster_charged <- oyster %>% filter(charge != 0)\n\n# Create simple scatter plot(s)\nqplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,\n      xlab = \"Journey time(mins)\", ylab = \"Charge (£)\")\n\n# Add smoother\nqplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,\n      xlab = \"Journey time(mins)\", ylab = \"Charge (£)\", geom = c(\"point\", \"smooth\"))\n\n# Use other data to colour and change shape\nqplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,\n      xlab = \"Journey time(mins)\", ylab = \"Charge (£)\", geom = c(\"point\"),\n      shape = journey.weekday, colour = journey.weekday)\n\n# ----------\n\n# Make a boxplot\nqplot(x = journey.weekday, y = as.numeric(journey.time), \n      data = oyster, geom = \"boxplot\", ylab = \"Journey time (mins)\")\n\n# Another summary\nvisited <- oyster %>%\n  select(from.clean, from.long, from.lat) %>%\n  setNames(c(\"station\", \"longitude\", \"latitude\")) %>%\n  rbind(oyster %>%\n          select(to.clean, to.long, to.lat) %>%\n          setNames(c(\"station\", \"longitude\", \"latitude\"))) %>%\n  group_by(station, longitude, latitude) %>%\n  summarise(visits = n()) %>%\n  filter(visits >= 10) %>% \n  ungroup() %>% \n  arrange(desc(visits))\n\n# Example bar plot using ggplot\nggplot(data = visited, aes(x = station, y = visits)) + \n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = -90))\n\n# Create a colour to use in the plot\nDarkBlue <- rgb(red = 0, green = 51, blue = 141, maxColorValue = 255)\n\n# Example faceted-histogram using ggplot:\noyster %>% \n  mutate(weekend = ifelse(journey.weekday == \"Saturday\" | journey.weekday == \"Sunday\", \n                          \"Weekend\", \"Weekday\")) %>%       \n  ggplot(aes(x = journey.time %>% as.numeric)) + \n  geom_histogram(fill = DarkBlue, colour = \"white\", binwidth = 5, alpha = 0.8) +\n  facet_grid(weekend ~ ., scales = \"fixed\") +\n  scale_x_continuous(breaks = seq(from = 0, \n                                  to = oyster$journey.time %>% as.numeric() %>%\n                                    max(na.rm = T) + 5, by = 5)) +\n  xlab(\"Journey time / minutes\") +\n  theme(axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        #axis.text.y = element_blank(),\n        text = element_text(size = 14),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        #         element_line(colour = \"lightgrey\",\n        #                                         linetype = \"dotted\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.margin.y = unit(0.1, units = \"in\"),\n        panel.background = element_rect(fill = \"white\", colour = \"lightgrey\"))\n\n\n# Step 6 - using leaflet -------------------------------------------------------\n# Create another summary, but this time exclude points without coordinates\nvisited <- oyster %>%\n  select(from.clean, from.long, from.lat) %>%\n  setNames(c(\"station\", \"longitude\", \"latitude\")) %>%\n  rbind(oyster %>%\n          select(to.clean, to.long, to.lat) %>%\n          setNames(c(\"station\", \"longitude\", \"latitude\"))) %>%\n  group_by(station, longitude, latitude) %>%\n  summarise(visits = n()) %>%\n  filter(!is.na((longitude)))\n\n# Make the map\nvisited %>%\n  leaflet() %>%\n  addTiles() %>% \n  addCircles(radius = ~2.2*visits, stroke = T, fillOpacity = 0.75)\n\n\n# Step 7 - using networkd3 -----------------------------------------------------\n# Summarise and create the plot in one\noyster %>% \n  group_by(from.clean, to.clean) %>% \n  tally()  %>% \n  simpleNetwork(zoom = TRUE)",
    "created" : 1456164067040.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1226079944",
    "id" : "E7F0C8CB",
    "lastKnownWriteTime" : 1456169665,
    "path" : "~/Documents/Programing/R_Practise/Script_3.R",
    "project_path" : "Script_3.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}
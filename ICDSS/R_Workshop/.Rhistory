getwd()
# load necessary packages
library(readr)
library(dplyr)
library(magrittr)
library(readxl)
library(tidyr)
library(lubridate)
library(stringr)
# Step 1 - read in the data ----------------------------------------------------
oyster <- read_csv(oyster_data_path)
colnames(oyster) <- tolower(colnames(oyster))
oyster <. read_csv(oyster_all_raw_20160125.csv)
oyster <- read_csv(oyster_all_raw_20160125.csv)
oyster <- read_csv(oyster_all_raw_20160125)
oyster <- read_csv(oyster_all_raw_20160125.csv)
oyster <- read_csv(oyster_all_raw_20160125.csv)
getwd()
oyster <- read_csv(oyster_all_raw_20160125.csv)
library(readr)
oyster_data_path <- /Users/starignus/Documents/Programing/R_Practise/oyster_all_raw_20160125.csv""
oyster_data_path <- "/Users/starignus/Documents/Programing/R_Practise/oyster_all_raw_20160125.csv"
oyster <- read_csv(oyster_data_path)
colnames(oyster) <- tolower(colnames(oyster))
colnames(oyster)
View(oyster)
View(oyster)
oyster %>% select(date, journey.action, charge)
oyster %>% select(1:3, 5, 7)
oyster %>% select(-journey.action, -charge)
oyster %>% select(-c(4, 6, 7))
oyster %>% filter(charge != 0)
oyster %>% filter(note != "")
whoops <- oyster %>% filter(balance < 0)
noteworthy <- oyster %>% filter(note != "" & charge >= 2) # multiple conditions
noteworthy
oyster %>% summarise(avg_charge = mean(charge, na.rm = TRUE)) # average charge
oyster %>% summarise(avg_charge = mean(charge, na.rm = TRUE), # average charge
sd_charge = sd(charge, na.rm = TRUE)) # charge std. deviation
whoops
oyster %>%
group_by(journey.action) %>%
summarise(avg_cost = mean(charge, na.rm = TRUE))
oyster
oyster  %>% arrange(desc(date))
oyster  %>% arrange(journey.action, desc(charge))
oyster_summary <- oyster %>%
group_by(journey.action) %>%
summarise(journeys = n()) %>%
ungroup() %>%
arrange(-journeys) %>%
head(5)
oyster_summary
oyster %>% slice(1:10)
badRecords <- "Topped-up|Season ticket|Unspecified location"
records <- grep(badRecords, oyster$journey.action)
records
badRecords
records
oyster <- oyster %>% slice(-records)
oyster %>%  mutate(newField = 4)
oyster %>% mutate(cost_plus_bal = charge + balance, # add charge to balance
cost_plus_bal_clean = sum(charge, balance, na.rm = TRUE)) # clean up
oyster %>% mutate(no_cost = ifelse(charge == 0 | is.na(charge), 1, 0))
oyster <- oyster %>%
mutate(start.time.clean = paste0(start.time, ":00"), # Create a start time field
end.time.clean = paste0(end.time, ":00")) # Create a end time field
oyster
mutation1 <- oyster %>%  mutate(newField = 4)
mutation1
muatation2 <- oyster %>% mutate(cost_plus_bal = charge + balance, # add charge to balance
cost_plus_bal_clean = sum(charge, balance, na.rm = TRUE)) # clean up
mutation2
muatation2
View(muatation2)
View(mutation1)
muatation3 <- oyster %>% mutate(no_cost = ifelse(charge == 0 | is.na(charge), 1, 0))
View(muatation3)
mutation4 <- oyster <- oyster %>%
mutate(start.time.clean = paste0(start.time, ":00"), # Create a start time field
end.time.clean = paste0(end.time, ":00")) # Create a end time field
View(mutation4)
oyster <- oyster %>%
separate(col = journey.action,
into = c("from", "to"),
sep = " to ",
remove = FALSE)
View(oyster)
View(oyster)
oyster <- oyster %>% mutate(date.clean = dmy(date))
oyster <- oyster %>%
mutate(start.datetime = paste(date, start.time.clean, sep = " "),
end.datetime = paste(date, end.time.clean, sep = " "))
oyster <- oyster %>%
mutate(start.datetime = dmy_hms(start.datetime),
end.datetime = dmy_hms(end.datetime))
afterMidnightSrt <- grep("00|01|02", substring(oyster$start.time,1,2))
afterMidnightSrt
afterMidnightEnd <- grep("00|01|02", substring(oyster$end.time,1,2))
afterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)]
afterMidnight
oyster %>% grep("00|01|02", oyster$end.time)
oyster %>% grep("00|01|02", oyster$start.time)
afterMidnightSrt <- grep("00|01|02", substring(oyster$start.time,1,2))
oyster %>% grep("00|01|02", oyster$start.time)
afterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)]
oyster[afterMidnight, "end.datetime"] <- oyster[afterMidnight, "end.datetime"] + days(1)
oyster <- oyster %>%
mutate(journey.time = difftime(end.datetime,
start.datetime, units = "mins"),
journey.weekday = wday(date.clean,
label = TRUE,
abbr = FALSE))
oyster %>%
filter(journey.time == max(oyster$journey.time, na.rm = TRUE)) %>%
select(journey.action, journey.time, date)
oyster %>%
filter(journey.time == max(oyster$journey.time, na.rm = TRUE)) %>%
select(journey.action, journey.time, date)
oyster %>%
group_by(journey.weekday) %>%
summarise(avg_time = floor(mean(journey.time, na.rm = TRUE)))
oyster %>%
group_by(date.clean, journey.weekday) %>%
summarise(journeys = n()) %>%
group_by(journey.weekday) %>%
summarise(avg_journeys = mean(journeys))
getwd()
oyster_data_path_ari <- "/Users/starignus/Documents/Programing/R_Practise/054808254624-20160215-1909.csv"
oyster_ari <- read_csv(oyster_data_path_ari)
View(oyster_ari)
oyster_ari <- read_csv(oyster_data_path_ari,col_names = TRUE, skip = 0, col_types = NULL)
problems(oyster_ari)
View(oyster_ari)
oyster_ari <- read_csv(oyster_data_path_ari,col_names = TRUE, skip = 0, col_types = NULL)
oyster_ari <- read_csv(oyster_data_path_ari)
problems(oyster_ari)
View(oyster_ari)
oyster_ari <- read_csv(oyster_data_path_ari,col_names = TRUE, skip = 0, col_types = NULL, na = c("", "NA"))
oyster_ari <- read_csv(oyster_data_path_ari, na = c("", "NA"))
View(oyster_ari)
oyster_ari <- read_csv(oyster_data_path_ari,col_names = TRUE, skip = 0, col_types = NULL, na = c("", "NA"), comment = "")
oyster_ari <- read_csv(oyster_data_path_ari,col_names = TRUE, skip = 0, col_types = NULL, na = c("", "NA"), comment = "")
oyster_ari <- read_csv(oyster_data_path_ari)
oyster_work <- read_csv(oyster_data_path)
View(oyster_work)
oyster_work <- read_csv(oyster_data_path_ari)
oyster_work <- read_csv2(oyster_data_path_ari)
oyster_ari <- read_csv2(oyster_data_path_ari)
oyster_work <- read_csv(oyster_data_path)
View(oyster_ari)
oyster_ari <- read_csv(oyster_data_path_ari)
problems(oyster_data_path_ari)
problems(oyster_data_path)
oyster_ari <- read_csv(oyster_data_path_ari)
oyster_ari <- read_csv(oyster_data_path_ari)
View(oyster_ari)
colnames(oyster_ari) <- tolower(colnames(oyster))
colnames(oyster_ari) <- tolower(colnames(oyster_ari))
View(oyster_ari)
dim(oyster_ari)
str(oyster_ari)
summary(oyster_ari)
oyster_ari  %>%  select(date, journey.action, charge)
View(oyster_work)
oyster_ari  %>%  select(date, journey/action, charge)
oyster_ari <- read_csv(oyster_data_path_ari)
colnames(oyster_ari) <- tolower(colnames(oyster_ari))
View(oyster_ari)
oyster_ari  %>%  select(date, journey.action, charge)
oyster_ari  %>%  select(1:3, 5, 7)
oyster_ari  %>%  select(-journey.action, -charge)
oyster_ari  %>%  select(-c(4, 6, 7))
oyster_ari  %>%  filter(charge != 0)
oyster_ari  %>%  filter(charge != 0)
oyster_ari  %>%  filter(note != "")
oyster_ari  %>%  filter(balance < 0)
oyster_ari  %>%  filter(note != "" & charge >= 2)
oyster_ari  %>%  filter(note != "" & charge == 0)
oyster_ari  %>%  filter(note != "" & charge > 0)
oyster_summary_ari <- oyster_ari  %>%
group_by(journey.action) %>%
summarise(journeys = n()) %>%
ungroup() %>%
arrange(-journeys) %>%
head(5)
oyster_summary_ari
oyster_summary_ari group_by(journey.action)
oyster_ari  %>%  group_by(journey.action)
oyster_ari
oyster_ari  %>%  group_by(journey.action)  %>%   summarise(avg_cost = mean(charge, na.rm = TRUE))
oyster_ari  %>%  group_by(journey.action)  %>%   summarise(avg_cost = mean(charge, na.rm = TRUE), sd_charge = sd(charge, na.rm = TRUE))
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())  %>%  ungroup()
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())  %>%  ungroup()  %>%  arrange(-journeys)
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())  %>%   arrange(-journeys)
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())  %>%   arrange(-journeys) %>%
head(5)
oyster_ari  %>%  group_by(journey.action)  %>%    summarise(journeys = n())  %>%   arrange(-journeys)%>%
head(5)
oyster_ari   %>% slice(1:10)
oyster_ari   %>% slice(5:10)
badRecords
records_ari <- grep(badRecords, oyster_ari$journey.action)
records_ari
records
records_ari  %>% mutate(newField = 10)
records_ari  %>% mutate(newField = 4)
oyster_ari  %>% mutate(newField = 4)
View(oyster_ari)
View(oyster_ari)
View(mutation4)
View(oyster)
oyster_ari  %>%  mutate(cost_plus_bal = charge + balance)
oyster_ari  %>%  mutate(cost_plus_bal = charge + balance, cost_plus_bal_clean = sum(charge, balance, na.rm = TRUE))
library(readr)
library(dplyr)
library(magrittr)
library(readxl)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(leaflet)
library(networkD3)
oyster_data_path <- "./oyster_all_raw_20160125.csv"
stations_data_path <- "./data/stations.csv"
# Step 1 - read in the oyster data and prepare it (session 2 repeat) -----------
oyster <- read_csv(oyster_data_path)
colnames(oyster) <- tolower(colnames(oyster))
badRecords <- "Topped-up|Season ticket|Unspecified location"
records <- grep(badRecords, oyster$journey.action)
oyster <- oyster %>% slice(-records)
oyster <- oyster %>%
mutate(start.time.clean = paste0(start.time, ":00"),
end.time.clean = paste0(end.time, ":00"))
oyster <- oyster %>%
separate(col = journey.action,
into = c("from", "to"),
sep = " to ",
remove = FALSE)
oyster <- oyster %>% mutate(date.clean = dmy(date))
oyster <- oyster %>%
mutate(start.datetime = dmy_hms(paste(date, start.time.clean, sep = " ")),
end.datetime = dmy_hms(paste(date, end.time.clean, sep = " ")))
afterMidnightSrt <- grep("00|01|02", substring(oyster$start.time,1,2))
afterMidnightEnd <- grep("00|01|02", substring(oyster$end.time,1,2))
afterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)]
oyster[afterMidnight, "end.datetime"] <- oyster[afterMidnight, "end.datetime"] + days(1)
oyster <- oyster %>% mutate(journey.time = difftime(end.datetime,
start.datetime,
units = "mins"),
journey.weekday = wday(date.clean,
label = TRUE,
abbr = FALSE))
stations <- read_csv(stations_data_path)
colnames(stations) <- tolower(colnames(stations))
stations_data_path <- "./stations.csv"
# Step 1 - read in the oyster data and prepare it (session 2 repeat) -----------
oyster <- read_csv(oyster_data_path)
colnames(oyster) <- tolower(colnames(oyster))
badRecords <- "Topped-up|Season ticket|Unspecified location"
records <- grep(badRecords, oyster$journey.action)
oyster <- oyster %>% slice(-records)
oyster <- oyster %>%
mutate(start.time.clean = paste0(start.time, ":00"),
end.time.clean = paste0(end.time, ":00"))
oyster <- oyster %>%
separate(col = journey.action,
into = c("from", "to"),
sep = " to ",
remove = FALSE)
oyster <- oyster %>% mutate(date.clean = dmy(date))
oyster <- oyster %>%
mutate(start.datetime = dmy_hms(paste(date, start.time.clean, sep = " ")),
end.datetime = dmy_hms(paste(date, end.time.clean, sep = " ")))
afterMidnightSrt <- grep("00|01|02", substring(oyster$start.time,1,2))
afterMidnightEnd <- grep("00|01|02", substring(oyster$end.time,1,2))
afterMidnight <- afterMidnightEnd[!(afterMidnightEnd == afterMidnightSrt)]
oyster[afterMidnight, "end.datetime"] <- oyster[afterMidnight, "end.datetime"] + days(1)
oyster <- oyster %>% mutate(journey.time = difftime(end.datetime,
start.datetime,
units = "mins"),
journey.weekday = wday(date.clean,
label = TRUE,
abbr = FALSE))
# Step 2 - read in the stations data -------------------------------------------
stations <- read_csv(stations_data_path)
colnames(stations) <- tolower(colnames(stations))
regex <- "\\[.*\\]|\\(.*\\)| [Dd][Ll][Rr]"
oyster <- oyster %>%
mutate(from.clean = str_trim(gsub(regex, "", from)),
to.clean = str_trim(gsub(regex, "", to)))
oyster <- oyster %>%
left_join(stations, by = c("from.clean" = "station")) %>%
rename(from.long = long,
from.lat = lat)
oyster <- oyster %>%
left_join(stations, by = c("to.clean" = "station")) %>%
rename(to.long = long,
to.lat = lat)
oyster %>%
group_by(from, from.long, from.lat) %>%
summarise(visits = n()) %>%
ungroup() %>% # ungroup removes the grouping and lets us sort the data
arrange(-visits)
qplot(x = as.numeric(journey.time), data = oyster)
qplot(x = as.numeric(journey.time), data = oyster,
main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count")
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"))
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("red"),
colour = I("white"))
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"))
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"), bindwidth =2)
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"), binwidth =2)
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"), binwidth =10)
qplot(x = as.numeric(journey.time), data = oyster, main = "Histogram of journey times",
xlab = "Journey time (mins)", ylab = "Count", fill = I("steelblue"),
colour = I("white"), binwidth =3)
oyster_charged <- oyster %>% filter(charge != 0)
qplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)")
qplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)", geom = c("point"),
shape = journey.weekday, colour = journey.weekday)
qplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = journey.weekday, data = oyster_charged,
+       xlab = "Journey time(mins)", ylab = "journey weekday", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = journey.weekday, data = oyster_charged,
+       xlab = "Journey time(mins)", ylab = "journey weekday", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = balance,data = oyster_charged,
+       +       xlab = "Journey time(mins)", ylab = "journey weekday", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = charge, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = balance, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Charge (£)", geom = c("point", "smooth"))
qplot(x = as.numeric(journey.time), y = balance, data = oyster_charged,
xlab = "Journey time(mins)", ylab = "Balance (£)", geom = c("point", "smooth"))
qplot(x = journey.weekday, y = as.numeric(journey.time),
data = oyster, geom = "boxplot", ylab = "Journey time (mins)")
visited <- oyster %>%
select(from.clean, from.long, from.lat) %>%
setNames(c("station", "longitude", "latitude")) %>%
rbind(oyster %>%
select(to.clean, to.long, to.lat) %>%
setNames(c("station", "longitude", "latitude"))) %>%
group_by(station, longitude, latitude) %>%
summarise(visits = n()) %>%
filter(visits >= 10) %>%
ungroup() %>%
arrange(desc(visits))
ggplot(data = visited, aes(x = station, y = visits)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = -90))
top_visits <- filter(visited, visits > =10)
DarkBlue <- rgb(red = 0, green = 51, blue = 141, maxColorValue = 255)
oyster %>%
mutate(weekend = ifelse(journey.weekday == "Saturday" | journey.weekday == "Sunday",
"Weekend", "Weekday")) %>%
ggplot(aes(x = journey.time %>% as.numeric)) +
geom_histogram(fill = DarkBlue, colour = "white", binwidth = 5, alpha = 0.8) +
facet_grid(weekend ~ ., scales = "fixed") +
scale_x_continuous(breaks = seq(from = 0,
to = oyster$journey.time %>% as.numeric() %>%
max(na.rm = T) + 5, by = 5)) +
xlab("Journey time / minutes") +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
#axis.text.y = element_blank(),
text = element_text(size = 14),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
#         element_line(colour = "lightgrey",
#                                         linetype = "dotted"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.margin.y = unit(0.1, units = "in"),
panel.background = element_rect(fill = "white", colour = "lightgrey"))
visited <- oyster %>%
select(from.clean, from.long, from.lat) %>%
setNames(c("station", "longitude", "latitude")) %>%
rbind(oyster %>%
select(to.clean, to.long, to.lat) %>%
setNames(c("station", "longitude", "latitude"))) %>%
group_by(station, longitude, latitude) %>%
summarise(visits = n()) %>%
filter(!is.na((longitude)))
# Make the map
visited %>%
leaflet() %>%
addTiles() %>%
addCircles(radius = ~2.2*visits, stroke = T, fillOpacity = 0.75)
oyster %>%
group_by(from.clean, to.clean) %>%
tally()  %>%
simpleNetwork(zoom = TRUE)
